/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InterviewSession as PrismaInterviewSession,
  Candidate as PrismaCandidate,
} from "@prisma/client";

export class InterviewSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InterviewSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.interviewSession.count(args);
  }

  async interviewSessions(
    args: Prisma.InterviewSessionFindManyArgs
  ): Promise<PrismaInterviewSession[]> {
    return this.prisma.interviewSession.findMany(args);
  }
  async interviewSession(
    args: Prisma.InterviewSessionFindUniqueArgs
  ): Promise<PrismaInterviewSession | null> {
    return this.prisma.interviewSession.findUnique(args);
  }
  async createInterviewSession(
    args: Prisma.InterviewSessionCreateArgs
  ): Promise<PrismaInterviewSession> {
    return this.prisma.interviewSession.create(args);
  }
  async updateInterviewSession(
    args: Prisma.InterviewSessionUpdateArgs
  ): Promise<PrismaInterviewSession> {
    return this.prisma.interviewSession.update(args);
  }
  async deleteInterviewSession(
    args: Prisma.InterviewSessionDeleteArgs
  ): Promise<PrismaInterviewSession> {
    return this.prisma.interviewSession.delete(args);
  }

  async getCandidate(parentId: string): Promise<PrismaCandidate | null> {
    return this.prisma.interviewSession
      .findUnique({
        where: { id: parentId },
      })
      .candidate();
  }
}
