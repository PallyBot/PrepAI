/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobDetailsService } from "../jobDetails.service";
import { JobDetailsCreateInput } from "./JobDetailsCreateInput";
import { JobDetails } from "./JobDetails";
import { JobDetailsFindManyArgs } from "./JobDetailsFindManyArgs";
import { JobDetailsWhereUniqueInput } from "./JobDetailsWhereUniqueInput";
import { JobDetailsUpdateInput } from "./JobDetailsUpdateInput";

export class JobDetailsControllerBase {
  constructor(protected readonly service: JobDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobDetails })
  async createJobDetails(
    @common.Body() data: JobDetailsCreateInput
  ): Promise<JobDetails> {
    return await this.service.createJobDetails({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        interviewType: true,
        language: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobDetails] })
  @ApiNestedQuery(JobDetailsFindManyArgs)
  async jobDetailsItems(@common.Req() request: Request): Promise<JobDetails[]> {
    const args = plainToClass(JobDetailsFindManyArgs, request.query);
    return this.service.jobDetailsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        interviewType: true,
        language: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobDetails(
    @common.Param() params: JobDetailsWhereUniqueInput
  ): Promise<JobDetails | null> {
    const result = await this.service.jobDetails({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        interviewType: true,
        language: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobDetails(
    @common.Param() params: JobDetailsWhereUniqueInput,
    @common.Body() data: JobDetailsUpdateInput
  ): Promise<JobDetails | null> {
    try {
      return await this.service.updateJobDetails({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          interviewType: true,
          language: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobDetails(
    @common.Param() params: JobDetailsWhereUniqueInput
  ): Promise<JobDetails | null> {
    try {
      return await this.service.deleteJobDetails({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          interviewType: true,
          language: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
