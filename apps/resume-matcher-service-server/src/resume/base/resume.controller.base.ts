/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResumeService } from "../resume.service";
import { ResumeCreateInput } from "./ResumeCreateInput";
import { Resume } from "./Resume";
import { ResumeFindManyArgs } from "./ResumeFindManyArgs";
import { ResumeWhereUniqueInput } from "./ResumeWhereUniqueInput";
import { ResumeUpdateInput } from "./ResumeUpdateInput";
import { ScanResultFindManyArgs } from "../../scanResult/base/ScanResultFindManyArgs";
import { ScanResult } from "../../scanResult/base/ScanResult";
import { ScanResultWhereUniqueInput } from "../../scanResult/base/ScanResultWhereUniqueInput";

export class ResumeControllerBase {
  constructor(protected readonly service: ResumeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Resume })
  async createResume(@common.Body() data: ResumeCreateInput): Promise<Resume> {
    return await this.service.createResume({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        fileUrl: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Resume] })
  @ApiNestedQuery(ResumeFindManyArgs)
  async resumes(@common.Req() request: Request): Promise<Resume[]> {
    const args = plainToClass(ResumeFindManyArgs, request.query);
    return this.service.resumes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        fileUrl: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Resume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async resume(
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<Resume | null> {
    const result = await this.service.resume({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        fileUrl: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Resume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResume(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() data: ResumeUpdateInput
  ): Promise<Resume | null> {
    try {
      return await this.service.updateResume({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          fileUrl: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Resume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResume(
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<Resume | null> {
    try {
      return await this.service.deleteResume({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          fileUrl: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/scanResults")
  @ApiNestedQuery(ScanResultFindManyArgs)
  async findScanResults(
    @common.Req() request: Request,
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<ScanResult[]> {
    const query = plainToClass(ScanResultFindManyArgs, request.query);
    const results = await this.service.findScanResults(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        overallScore: true,
        skillsMatchScore: true,
        experienceMatchScore: true,
        educationMatchScore: true,
        formattingScore: true,

        resume: {
          select: {
            id: true,
          },
        },

        jobDescription: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scanResults")
  async connectScanResults(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: ScanResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanResults: {
        connect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scanResults")
  async updateScanResults(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: ScanResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanResults: {
        set: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scanResults")
  async disconnectScanResults(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: ScanResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanResults: {
        disconnect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }
}
