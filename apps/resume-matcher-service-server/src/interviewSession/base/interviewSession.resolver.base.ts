/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InterviewSession } from "./InterviewSession";
import { InterviewSessionCountArgs } from "./InterviewSessionCountArgs";
import { InterviewSessionFindManyArgs } from "./InterviewSessionFindManyArgs";
import { InterviewSessionFindUniqueArgs } from "./InterviewSessionFindUniqueArgs";
import { CreateInterviewSessionArgs } from "./CreateInterviewSessionArgs";
import { UpdateInterviewSessionArgs } from "./UpdateInterviewSessionArgs";
import { DeleteInterviewSessionArgs } from "./DeleteInterviewSessionArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { InterviewSessionService } from "../interviewSession.service";
@graphql.Resolver(() => InterviewSession)
export class InterviewSessionResolverBase {
  constructor(protected readonly service: InterviewSessionService) {}

  async _interviewSessionsMeta(
    @graphql.Args() args: InterviewSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InterviewSession])
  async interviewSessions(
    @graphql.Args() args: InterviewSessionFindManyArgs
  ): Promise<InterviewSession[]> {
    return this.service.interviewSessions(args);
  }

  @graphql.Query(() => InterviewSession, { nullable: true })
  async interviewSession(
    @graphql.Args() args: InterviewSessionFindUniqueArgs
  ): Promise<InterviewSession | null> {
    const result = await this.service.interviewSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InterviewSession)
  async createInterviewSession(
    @graphql.Args() args: CreateInterviewSessionArgs
  ): Promise<InterviewSession> {
    return await this.service.createInterviewSession({
      ...args,
      data: {
        ...args.data,

        candidate: args.data.candidate
          ? {
              connect: args.data.candidate,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => InterviewSession)
  async updateInterviewSession(
    @graphql.Args() args: UpdateInterviewSessionArgs
  ): Promise<InterviewSession | null> {
    try {
      return await this.service.updateInterviewSession({
        ...args,
        data: {
          ...args.data,

          candidate: args.data.candidate
            ? {
                connect: args.data.candidate,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InterviewSession)
  async deleteInterviewSession(
    @graphql.Args() args: DeleteInterviewSessionArgs
  ): Promise<InterviewSession | null> {
    try {
      return await this.service.deleteInterviewSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Candidate, {
    nullable: true,
    name: "candidate",
  })
  async getCandidate(
    @graphql.Parent() parent: InterviewSession
  ): Promise<Candidate | null> {
    const result = await this.service.getCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
