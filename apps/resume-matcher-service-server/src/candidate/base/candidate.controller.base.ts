/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CandidateService } from "../candidate.service";
import { CandidateCreateInput } from "./CandidateCreateInput";
import { Candidate } from "./Candidate";
import { CandidateFindManyArgs } from "./CandidateFindManyArgs";
import { CandidateWhereUniqueInput } from "./CandidateWhereUniqueInput";
import { CandidateUpdateInput } from "./CandidateUpdateInput";
import { InterviewSessionFindManyArgs } from "../../interviewSession/base/InterviewSessionFindManyArgs";
import { InterviewSession } from "../../interviewSession/base/InterviewSession";
import { InterviewSessionWhereUniqueInput } from "../../interviewSession/base/InterviewSessionWhereUniqueInput";

export class CandidateControllerBase {
  constructor(protected readonly service: CandidateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Candidate })
  async createCandidate(
    @common.Body() data: CandidateCreateInput
  ): Promise<Candidate> {
    return await this.service.createCandidate({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        cvText: true,
        cvFileUrl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Candidate] })
  @ApiNestedQuery(CandidateFindManyArgs)
  async candidates(@common.Req() request: Request): Promise<Candidate[]> {
    const args = plainToClass(CandidateFindManyArgs, request.query);
    return this.service.candidates({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        cvText: true,
        cvFileUrl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async candidate(
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<Candidate | null> {
    const result = await this.service.candidate({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
        cvText: true,
        cvFileUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCandidate(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() data: CandidateUpdateInput
  ): Promise<Candidate | null> {
    try {
      return await this.service.updateCandidate({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          cvText: true,
          cvFileUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Candidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCandidate(
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<Candidate | null> {
    try {
      return await this.service.deleteCandidate({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
          cvText: true,
          cvFileUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/interviewSessions")
  @ApiNestedQuery(InterviewSessionFindManyArgs)
  async findInterviewSessions(
    @common.Req() request: Request,
    @common.Param() params: CandidateWhereUniqueInput
  ): Promise<InterviewSession[]> {
    const query = plainToClass(InterviewSessionFindManyArgs, request.query);
    const results = await this.service.findInterviewSessions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        sessionDate: true,
        transcript: true,
        overallScore: true,

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/interviewSessions")
  async connectInterviewSessions(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: InterviewSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviewSessions: {
        connect: body,
      },
    };
    await this.service.updateCandidate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/interviewSessions")
  async updateInterviewSessions(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: InterviewSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviewSessions: {
        set: body,
      },
    };
    await this.service.updateCandidate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/interviewSessions")
  async disconnectInterviewSessions(
    @common.Param() params: CandidateWhereUniqueInput,
    @common.Body() body: InterviewSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviewSessions: {
        disconnect: body,
      },
    };
    await this.service.updateCandidate({
      where: params,
      data,
      select: { id: true },
    });
  }
}
