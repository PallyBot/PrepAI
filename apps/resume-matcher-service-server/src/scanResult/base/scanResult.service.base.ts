/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ScanResult as PrismaScanResult,
  Resume as PrismaResume,
  JobDescription as PrismaJobDescription,
} from "@prisma/client";

import { ResumeMatchInput } from "../ResumeMatchInput";
import { ResumeMatchOutput } from "../ResumeMatchOutput";

export class ScanResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScanResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scanResult.count(args);
  }

  async scanResults(
    args: Prisma.ScanResultFindManyArgs
  ): Promise<PrismaScanResult[]> {
    return this.prisma.scanResult.findMany(args);
  }
  async scanResult(
    args: Prisma.ScanResultFindUniqueArgs
  ): Promise<PrismaScanResult | null> {
    return this.prisma.scanResult.findUnique(args);
  }
  async createScanResult(
    args: Prisma.ScanResultCreateArgs
  ): Promise<PrismaScanResult> {
    return this.prisma.scanResult.create(args);
  }
  async updateScanResult(
    args: Prisma.ScanResultUpdateArgs
  ): Promise<PrismaScanResult> {
    return this.prisma.scanResult.update(args);
  }
  async deleteScanResult(
    args: Prisma.ScanResultDeleteArgs
  ): Promise<PrismaScanResult> {
    return this.prisma.scanResult.delete(args);
  }

  async getResume(parentId: string): Promise<PrismaResume | null> {
    return this.prisma.scanResult
      .findUnique({
        where: { id: parentId },
      })
      .resume();
  }

  async getJobDescription(
    parentId: string
  ): Promise<PrismaJobDescription | null> {
    return this.prisma.scanResult
      .findUnique({
        where: { id: parentId },
      })
      .jobDescription();
  }
  async GenerateResumeMatchScore(
    args: ResumeMatchInput
  ): Promise<ResumeMatchOutput> {
    throw new Error("Not implemented");
  }
}
