/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScanResultService } from "../scanResult.service";
import { ScanResultCreateInput } from "./ScanResultCreateInput";
import { ScanResult } from "./ScanResult";
import { ScanResultFindManyArgs } from "./ScanResultFindManyArgs";
import { ScanResultWhereUniqueInput } from "./ScanResultWhereUniqueInput";
import { ScanResultUpdateInput } from "./ScanResultUpdateInput";
import { ResumeMatchInput } from "../ResumeMatchInput";
import { ResumeMatchOutput } from "../ResumeMatchOutput";

export class ScanResultControllerBase {
  constructor(protected readonly service: ScanResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScanResult })
  async createScanResult(
    @common.Body() data: ScanResultCreateInput
  ): Promise<ScanResult> {
    return await this.service.createScanResult({
      data: {
        ...data,

        resume: data.resume
          ? {
              connect: data.resume,
            }
          : undefined,

        jobDescription: data.jobDescription
          ? {
              connect: data.jobDescription,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        overallScore: true,
        skillsMatchScore: true,
        experienceMatchScore: true,
        educationMatchScore: true,
        formattingScore: true,

        resume: {
          select: {
            id: true,
          },
        },

        jobDescription: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScanResult] })
  @ApiNestedQuery(ScanResultFindManyArgs)
  async scanResults(@common.Req() request: Request): Promise<ScanResult[]> {
    const args = plainToClass(ScanResultFindManyArgs, request.query);
    return this.service.scanResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        overallScore: true,
        skillsMatchScore: true,
        experienceMatchScore: true,
        educationMatchScore: true,
        formattingScore: true,

        resume: {
          select: {
            id: true,
          },
        },

        jobDescription: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScanResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scanResult(
    @common.Param() params: ScanResultWhereUniqueInput
  ): Promise<ScanResult | null> {
    const result = await this.service.scanResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        overallScore: true,
        skillsMatchScore: true,
        experienceMatchScore: true,
        educationMatchScore: true,
        formattingScore: true,

        resume: {
          select: {
            id: true,
          },
        },

        jobDescription: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScanResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScanResult(
    @common.Param() params: ScanResultWhereUniqueInput,
    @common.Body() data: ScanResultUpdateInput
  ): Promise<ScanResult | null> {
    try {
      return await this.service.updateScanResult({
        where: params,
        data: {
          ...data,

          resume: data.resume
            ? {
                connect: data.resume,
              }
            : undefined,

          jobDescription: data.jobDescription
            ? {
                connect: data.jobDescription,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          overallScore: true,
          skillsMatchScore: true,
          experienceMatchScore: true,
          educationMatchScore: true,
          formattingScore: true,

          resume: {
            select: {
              id: true,
            },
          },

          jobDescription: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScanResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScanResult(
    @common.Param() params: ScanResultWhereUniqueInput
  ): Promise<ScanResult | null> {
    try {
      return await this.service.deleteScanResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          overallScore: true,
          skillsMatchScore: true,
          experienceMatchScore: true,
          educationMatchScore: true,
          formattingScore: true,

          resume: {
            select: {
              id: true,
            },
          },

          jobDescription: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/generateResumeMatchScore")
  @swagger.ApiOkResponse({
    type: ResumeMatchOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateResumeMatchScore(
    @common.Body()
    body: ResumeMatchInput
  ): Promise<ResumeMatchOutput> {
    return this.service.GenerateResumeMatchScore(body);
  }
}
