/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InterviewSessionService } from "../interviewSession.service";
import { InterviewSessionCreateInput } from "./InterviewSessionCreateInput";
import { InterviewSession } from "./InterviewSession";
import { InterviewSessionFindManyArgs } from "./InterviewSessionFindManyArgs";
import { InterviewSessionWhereUniqueInput } from "./InterviewSessionWhereUniqueInput";
import { InterviewSessionUpdateInput } from "./InterviewSessionUpdateInput";

export class InterviewSessionControllerBase {
  constructor(protected readonly service: InterviewSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InterviewSession })
  async createInterviewSession(
    @common.Body() data: InterviewSessionCreateInput
  ): Promise<InterviewSession> {
    return await this.service.createInterviewSession({
      data: {
        ...data,

        candidate: data.candidate
          ? {
              connect: data.candidate,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        sessionDate: true,
        transcript: true,
        overallScore: true,

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InterviewSession] })
  @ApiNestedQuery(InterviewSessionFindManyArgs)
  async interviewSessions(
    @common.Req() request: Request
  ): Promise<InterviewSession[]> {
    const args = plainToClass(InterviewSessionFindManyArgs, request.query);
    return this.service.interviewSessions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        sessionDate: true,
        transcript: true,
        overallScore: true,

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InterviewSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async interviewSession(
    @common.Param() params: InterviewSessionWhereUniqueInput
  ): Promise<InterviewSession | null> {
    const result = await this.service.interviewSession({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        sessionDate: true,
        transcript: true,
        overallScore: true,

        candidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InterviewSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInterviewSession(
    @common.Param() params: InterviewSessionWhereUniqueInput,
    @common.Body() data: InterviewSessionUpdateInput
  ): Promise<InterviewSession | null> {
    try {
      return await this.service.updateInterviewSession({
        where: params,
        data: {
          ...data,

          candidate: data.candidate
            ? {
                connect: data.candidate,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          sessionDate: true,
          transcript: true,
          overallScore: true,

          candidate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InterviewSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInterviewSession(
    @common.Param() params: InterviewSessionWhereUniqueInput
  ): Promise<InterviewSession | null> {
    try {
      return await this.service.deleteInterviewSession({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          sessionDate: true,
          transcript: true,
          overallScore: true,

          candidate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
